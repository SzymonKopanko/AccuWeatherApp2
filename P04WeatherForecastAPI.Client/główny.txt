<Application x:Class="P04WeatherForecastAPI.Client.App"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:local="clr-namespace:P04WeatherForecastAPI.Client"
             Startup="OnStartup" ><!--StartupUri="MainWindow.xaml"-->
    <Application.Resources>
         
    </Application.Resources>
</Application>
using Microsoft.Extensions.DependencyInjection;
using P04WeatherForecastAPI.Client.Services;
using P04WeatherForecastAPI.Client.ViewModels;
using System;
using System.Collections.Generic;
using System.Configuration;
using System.Data;
using System.Linq;
using System.Threading.Tasks;
using System.Windows;

namespace P04WeatherForecastAPI.Client
{
    /// <summary>
    /// Interaction logic for App.xaml
    /// </summary>
    public partial class App : Application
    {
        IServiceProvider _serviceProvider;

        public App()
        {
            var serviceCollection = new ServiceCollection();
            ConfigureServices(serviceCollection);
            _serviceProvider = serviceCollection.BuildServiceProvider();

        }

        private void ConfigureServices(IServiceCollection services)
        {
            services.AddSingleton<IAccuWeatherService, AccuWeatherService>();
            services.AddSingleton<MainViewModel>();
            services.AddTransient<MainWindow>();
        }

        private void OnStartup(object sender, StartupEventArgs e)
        {
            var mainWindow = _serviceProvider.GetService<MainWindow>();
            mainWindow.Show();
        }

    }
}
<Window x:Class="P04WeatherForecastAPI.Client.MainWindow"
        xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
        xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
        xmlns:local="clr-namespace:P04WeatherForecastAPI.Client"
        mc:Ignorable="d"
        Title="MainWindow" Height="411" Width="738">
    <DockPanel>
        <StackPanel Width="240" DockPanel.Dock="Left">
            <Label Content="City:" ></Label>
            <TextBox x:Name="txtCity"></TextBox>
            <Button x:Name="btnSearch" Content="Search" Command="{Binding LoadCitiesCommand}" CommandParameter="{Binding Text, ElementName=txtCity}" Width="Auto"></Button>
            <ListBox x:Name="lbData" ItemsSource="{Binding Cities}" SelectedItem="{Binding SelectedCity}" DisplayMemberPath="LocalizedName"></ListBox>
            
            <TextBox x:Name="TextRegionCode" Width="120"></TextBox>
            <Button x:Name="btnGetRegionCode" Content="Get Region Code" Command="{Binding LoadRegionCodeCommand}" CommandParameter="{Binding Text, ElementName=TextRegionCode}" Width="Auto"></Button>

            <Label Content="Name of administrative area:" Width="Auto"/>
            <Label x:Name="lblAdminArea" HorizontalAlignment="Center" Content="{Binding SelectedAdministrativeArea.LocalizedName}"></Label>
        </StackPanel>
        <StackPanel Width="300" DockPanel.Dock="Right">
            <Label HorizontalAlignment="Center" Content="Temperature for city:"></Label>
            <Label x:Name="lblCityName" HorizontalAlignment="Center" Content="{Binding SelectedCity.LocalizedName}"></Label>
            <Label  HorizontalAlignment="Center" Content="is:"></Label>
            <Label x:Name="lblTemperatureValue" HorizontalAlignment="Center" Content="{Binding WeatherView.CurrentTemperature}"></Label>
            
            <Label HorizontalAlignment="Center" Content="Temperature yesterday was:" />
            <Label x:Name="lblTemperatureValueYesterday" HorizontalAlignment="Center" Content="{Binding WeatherView.YesterdayTemperature}"></Label>

            <Label HorizontalAlignment="Center" Content="Past 6h temperature was:" />
            <Label x:Name="lblTemperatureValuePast6h" HorizontalAlignment="Center" Content="{Binding WeatherView.Temperature6hAgo}"></Label>

            <Label HorizontalAlignment="Center" Content="Weather description in 1h forecast:"/>
            <Label x:Name="lblWeatherDescription" HorizontalAlignment="Center" Content="{Binding WeatherView.WeatherForecastIn1h}"></Label>

            <Label HorizontalAlignment="Center" Content="Weather description in 12h forecast:" />
            <Label x:Name="lblWeatherDescriptionIn12Hour" HorizontalAlignment="Center" Content="{Binding WeatherView.WeatherForecastIn12h}"></Label>
        </StackPanel>
    </DockPanel>
</Window>
using P04WeatherForecastAPI.Client.Models;
using P04WeatherForecastAPI.Client.Services;
using P04WeatherForecastAPI.Client.ViewModels;
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Data;
using System.Windows.Documents;
using System.Windows.Input;
using System.Windows.Media;
using System.Windows.Media.Imaging;
using System.Windows.Navigation;
using System.Windows.Shapes;

namespace P04WeatherForecastAPI.Client
{
    //MVVM

    /// <summary>
    /// Interaction logic for MainWindow.xaml
    /// </summary>
    public partial class MainWindow : Window
    {
        private readonly MainViewModel _viewModel;
        public MainWindow(MainViewModel viewModel)
        {
            InitializeComponent();
            _viewModel = viewModel;
            DataContext = _viewModel;
            //accuWeatherService = new AccuWeatherService();
        }








        //AccuWeatherService accuWeatherService;
        //IAccuWeatherService _accuWeatherService;
        //public MainWindow(IAccuWeatherService accuWeatherService)
        //{
        //    InitializeComponent();
        //    _accuWeatherService = accuWeatherService;
        //    //accuWeatherService = new AccuWeatherService();
        //}

        //private async void btnSearch_Click(object sender, RoutedEventArgs e)
        //{

        //    City[] cities= await _accuWeatherService.GetLocations(txtCity.Text);

        //    // standardowy sposób dodawania elementów
        //    //lbData.Items.Clear();
        //    //foreach (var c in cities)
        //    //    lbData.Items.Add(c.LocalizedName);

        //    // teraz musimy skorzystac z bindowania danych bo chcemy w naszej kontrolce przechowywac takze id miasta 
        //    lbData.ItemsSource = cities;
        //}

        //private async void lbData_SelectionChanged(object sender, SelectionChangedEventArgs e)
        //{
        //    var selectedCity= (City)lbData.SelectedItem;
        //    if(selectedCity != null)
        //    {
        //        var weather = await _accuWeatherService.GetCurrentConditions(selectedCity.Key);
        //        lblCityName.Content = selectedCity.LocalizedName;
        //        double tempValue = weather.Temperature.Metric.Value;
        //        lblTemperatureValue.Content = Convert.ToString(tempValue);
        //    }
        //}
    }
}
